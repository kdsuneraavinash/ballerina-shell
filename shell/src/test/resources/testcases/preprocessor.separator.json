[
  {
    "name": "Parse valid strings as is",
    "input": "int value = 100;",
    "expected": [
      "int value = 100;"
    ]
  },
  {
    "name": "Add semicolon at the end",
    "input": "int number",
    "expected": [
      "int number;"
    ]
  },
  {
    "name": "Separate on semicolons",
    "input": "int number; number = 100;",
    "expected": [
      "int number;",
      "number = 100;"
    ]
  },
  {
    "name": "Do not break on contained semicolons",
    "input": "function () { int p = 100; string h = \"hello\";};",
    "expected": [
      "function () { int p = 100; string h = \"hello\";};"
    ]
  },
  {
    "name": "Remove unnecessary spaces I",
    "input": "  \tint number; \n   ",
    "expected": [
      "int number;"
    ]
  },
  {
    "name": "Remove unnecessary spaces II",
    "input": "  \tint number; \n  string value ",
    "expected": [
      "int number;",
      "string value;"
    ]
  },
  {
    "name": "Ignore whitespaces inside expressions",
    "input": "  \tint ( hello ) number; \n ",
    "expected": [
      "int ( hello ) number;"
    ]
  },
  {
    "name": "Ignore toplevel semicolons if in string",
    "input": "\" a;  b; \"",
    "expected": [
      "\" a;  b; \";"
    ]
  },
  {
    "name": "Only split on top level semicolons I",
    "input": "  int a = 0; while (a < 10) { a+= 1; }",
    "expected": [
      "int a = 0;",
      "while (a < 10) { a+= 1; };"
    ]
  },
  {
    "name": "Only split on top level semicolons II",
    "input": "(a; b; b[c;]); d; {e; f;(h;)}",
    "expected": [
      "(a; b; b[c;]);",
      "d;",
      "{e; f;(h;)};"
    ]
  },
  {
    "name": "Error on mismatched curly braces",
    "input": "{aaa { bbb }",
    "expected": [],
    "isException": true
  },
  {
    "name": "Error on mismatched brackets",
    "input": "[] [[[ ]]",
    "expected": [],
    "isException": true
  },
  {
    "name": "Error on mismatched parenthesis",
    "input": "(( ())))",
    "expected": [],
    "isException": true
  },
  {
    "name": "Ignore mismatched parenthesis if on string",
    "input": "(( (\")\")))",
    "expected": [
      "(( (\")\")));"
    ]
  },
  {
    "name": "Ignore empty semicolons I",
    "input": ";;;;;",
    "expected": []
  },
  {
    "name": "Ignore empty semicolons II",
    "input": ";;aa;;;",
    "expected": [
      "aa;"
    ]
  },
  {
    "name": "Ignore empty semicolons III",
    "input": ";;aa;bbb;;",
    "expected": [
      "aa;",
      "bbb;"
    ]
  },
  {
    "name": "Ignore single quotes",
    "input": "'Hello('",
    "expected": [],
    "isException": true
  }
]
