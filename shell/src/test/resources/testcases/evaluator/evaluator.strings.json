[
  {
    "code": "import ballerina/lang.'string;",
    "stdout": null
  },
  {
    "code": "string statement = \"Lion in Town. Catch the Lion\";"
  },
  {
    "code": "string s1 = statement.toUpperAscii(); s1",
    "expr": "LION IN TOWN. CATCH THE LION"
  },
  {
    "code": "string s2 = statement.toLowerAscii(); s2",
    "expr": "lion in town. catch the lion"
  },
  {
    "code": "string s3 = statement.substring(0, 4); s3",
    "expr": "Lion"
  },
  {
    "code": "int? index = statement.indexOf(\"on\");"
  },
  {
    "code": "if (index is int) {\n io:println(\"IndexOf: \", index);}",
    "stdout": "IndexOf: 2\n"
  },
  {
    "code": "int length = statement.length(); length",
    "expr": "28"
  },
  {
    "code": "string hello = \"Hello\";"
  },
  {
    "code": "string ballerina = \"Ballerina!\";"
  },
  {
    "code": "string s4 = hello.concat(\" \", ballerina); s4",
    "expr": "Hello Ballerina!"
  },
  {
    "code": "string s5 = \",\".'join(hello, ballerina); s5",
    "expr": "Hello,Ballerina!"
  },
  {
    "code": "byte[] bArray = hello.toBytes(); bArray",
    "expr": "[72,101,108,108,111]"
  },
  {
    "code": "string|error s6 = 'string:fromBytes(bArray);"
  },
  {
    "code": "if (s6 is string) {\nio:println(\"From bytes: \", s6);}",
    "stdout": "From bytes: Hello\n"
  },
  {
    "code": "string toTrim = \"  Ballerina Programming Language  \"; toTrim.trim();",
    "expr": "Ballerina Programming Language"
  },
  {
    "code": "boolean hasSuffix = statement.endsWith(\"Lion\"); hasSuffix",
    "expr": "true"
  },
  {
    "code": "boolean hasPrefix = statement.startsWith(\"Lion\"); hasPrefix",
    "expr": "true"
  },
  {
    "code": "string name = \"Sam\";"
  },
  {
    "code": "int marks = 90;"
  },
  {
    "code": "string[] subjects = [\"English\", \"Science\"];"
  },
  {
    "code": "float average = 71.5;"
  },
  {
    "code": "io:sprintf(\"%s scored %d for %s and has an average of %.2f.\", name, marks, subjects[0], average);",
    "expr": "Sam scored 90 for English and has an average of 71.50."
  },
  {
    "code": "string country = \"Sri Lanka\";"
  },
  {
    "code": "string c = country[4]; c",
    "expr": "L"
  }
]
