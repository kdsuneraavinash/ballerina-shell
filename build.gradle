/*
 *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
plugins {
    id 'java'
}

description = 'Ballerina - REPL Shell Project'

group = 'io.ballerina'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
    flatDir {
        dirs "${rootProject.projectDir}/libs"
    }
}

dependencies {
    implementation name: 'ballerina-parser-2.0.0-Preview6-SNAPSHOT'
    implementation name: 'ballerina-tools-api-2.0.0-Preview5-SNAPSHOT'

    implementation(group: 'com.google.code.gson', name: 'gson', version: '2.8.6')
    implementation(group: 'commons-cli', name: 'commons-cli', version: '1.3.1') {
        because("To handle command line arguments")
    }
    implementation(group: 'org.freemarker', name: 'freemarker', version: '2.3.30') {
        because("To render the ballerina file generated code")
    }
    implementation(group: 'org.jline', name: 'jline', version: '3.17.1') {
        because("To implement the REPL CLI functionalities")
    }
    testImplementation('org.testng:testng:6.14.3') {
        because("To test the core functionality")
    }
}

test {
    useTestNG()
}

// Compile Configuration
compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

def mainCliClass = 'org.ballerina.repl.ReplShellApplication'
task run(type: JavaExec) {
    main = mainCliClass
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
}

task fatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest { attributes 'Main-Class': mainCliClass }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

ext.moduleName = 'io.ballerina.shell'
